// This file is part of Metaplay SDK which is released under the Metaplay SDK License.

#if !METAPLAY_DISABLE_GUILDS

using System;

namespace Metaplay.Core.Guild
{
    /// <summary>
    /// Provides base validation logic for various guild requirements. Rules may be customized by
    /// inheriting this class.
    /// </summary>
    public class GuildRequirementsValidator : IMetaIntegrationSingleton<GuildRequirementsValidator>
    {
        /// <summary>
        /// Min DisplayName string length
        /// </summary>
        public virtual int MinDisplayNameLength => 3;

        /// <summary>
        /// Max DisplayName string length
        /// </summary>
        public virtual int MaxDisplayNameLength => 20;

        /// <summary>
        /// Min Description string length
        /// </summary>
        public virtual int MinDescriptionLength => 0;

        /// <summary>
        /// Max Description string length
        /// </summary>
        public virtual int MaxDescriptionLength => 200;

        /// <summary>
        /// Returns true if given name is a valid display name for a guild.
        /// </summary>
        /// <param name="displayName">The name to validate</param>
        /// <returns>True is the name was valid</returns>
        public virtual bool ValidateDisplayName(string displayName)
        {
            if (displayName == null)
                return false;

            // Validate that length of name is between Min and Max characters long
            if (displayName.Length < MinDisplayNameLength || displayName.Length > MaxDisplayNameLength)
                return false;

            // Check that no control characters are inlcuded
            foreach (char ch in displayName)
            {
                if (Char.IsControl(ch))
                    return false;
            }

            // All steps passed - The name is valid
            return true;
        }

        /// <summary>
        /// Validate a possible new description for a guild
        /// </summary>
        /// <param name="description">The name to validate</param>
        /// <returns>True is the description was valid</returns>
        public virtual bool ValidateDescription(string description)
        {
            if (description == null)
                return false;

            // Validate that length of name is between Min and Max characters long
            if (description.Length < MinDescriptionLength || description.Length > MaxDescriptionLength)
                return false;

            // Check that no control characters are inlcuded
            foreach (char ch in description)
            {
                if (Char.IsControl(ch))
                    return false;
            }

            // All steps passed - The name is valid
            return true;
        }

        /// <summary>
        /// Validates the guild creation params generated by <c>PlayerActorBase</c>.<c>TryCreateGuildCreationParamsFromRequest</c>.
        /// Returning false refuses the guild creation. Note that the call to this method is delayed from
        /// the point in time when arguments were generated, and Player may have changed its state by the
        /// time this method is called.
        /// <para>
        /// Base implementation checks the display name and the description.
        /// </para>
        /// </summary>
        public virtual bool ValidateGuildCreation(GuildCreationParamsBase baseArgs)
        {
            if (baseArgs == null)
                return false;

            if (!ValidateDisplayName(baseArgs.DisplayName))
                return false;

            if (!ValidateDescription(baseArgs.Description))
                return false;

            return true;
        }
    }
}

#endif
