// This file is part of Metaplay SDK which is released under the Metaplay SDK License.

#if !METAPLAY_DISABLE_GUILDS

using Metaplay.Core.Model;
using Metaplay.Core.Guild;

namespace Metaplay.Core.Rewards
{
    /// <summary>
    /// Base class for declaring rewards that can be given to guilds.
    /// </summary>
    [GuildsEnabledCondition]
    [MetaSerializable]
    [UseCustomParserFromDerived]
    public abstract class MetaGuildRewardBase : MetaReward
    {
        /// <summary>
        /// This function gets called when a guild has claimed the reward
        /// and the contents should be added to the GuildModel.
        /// </summary>
        /// <param name="source">Optional source information generated by custom <see cref="MetaRewardSourceProvider"/>, or <c>null</c>.</param>
        public abstract void InvokeConsume(IGuildModelBase guildModel, IRewardSource source);
    }

    /// <summary>
    /// Base class for declaring things that can be rewarded to a guild.
    /// </summary>
    [MetaSerializable]
    [UseCustomParserFromDerived]
    public abstract class MetaGuildReward<TModel> : MetaGuildRewardBase where TModel : IGuildModelBase
    {
        public override sealed void InvokeConsume(IGuildModelBase guildModel, IRewardSource source)
        {
            Consume((TModel)guildModel, source);
        }

        /// <inheritdoc cref="InvokeConsume(IGuildModelBase, IRewardSource)"/>
        public abstract void Consume(TModel guildModel, IRewardSource source);
    }
}

#endif
