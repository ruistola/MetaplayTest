// This file is part of Metaplay SDK which is released under the Metaplay SDK License.

using Metaplay.Core.Model;
using Metaplay.Core.Player;

namespace Metaplay.Core.Rewards
{
    /// <summary>
    /// Base class for declaring rewards that can be given to players.
    /// </summary>
    [MetaSerializable]
    [UseCustomParserFromDerived]
    public abstract class MetaPlayerRewardBase : MetaReward
    {
        /// <summary>
        /// This function gets called when a player has claimed the reward
        /// and the contents should be added to the PlayerModel.
        /// </summary>
        /// <param name="source">Optional source information generated by custom <see cref="MetaRewardSourceProvider"/>, or <c>null</c>.</param>
        public abstract void InvokeConsume(IPlayerModelBase playerModel, IRewardSource source);
    }

    /// <summary>
    /// Base class for declaring things that can be rewarded to a player.
    /// </summary>
    [MetaSerializable]
    [UseCustomParserFromDerived]
    public abstract class MetaPlayerReward<TModel> : MetaPlayerRewardBase where TModel : IPlayerModelBase
    {
        public sealed override void InvokeConsume(IPlayerModelBase playerModel, IRewardSource source)
        {
            Consume((TModel)playerModel, source);
        }

        /// <inheritdoc cref="InvokeConsume(IPlayerModelBase, IRewardSource)"/>
        public abstract void Consume(TModel playerModel, IRewardSource source);
    }
}
